%%

import re

from nodes import *

try:
    u = unicode
except Exception as e:
    # We're in python 3, so there is no need to coerce.
    u = lambda x: x

def indent(init=""):
    return MemoRule(re.compile("{0}[ \t]+".format(init if not isinstance(init, MemoRule) else init.memorized)))

bck = re.compile("\\\\(.)")

%%

comment = /\s*#\s.*/m
_space = /[ \t]*/
EOL = "\n"

ident = /[-$a-zA-Z0-9:_]+/
vident = /[a-zA-Z_][a-zA-Z0-9_]*/

access_or_funcall = b:[ Balanced("[", "]") | Balanced("(", ")") ] -> b[0] + b[1] + b[2]
variable_component = i:vident a:access_or_funcall* -> i + "".join(a)
variable_dotted = i:OneOrMoreSeparated(variable_component, ".") -> u(".").join(i)
variable = "$" i:OneOrMoreSeparated(variable_dotted, "|") -> u("{{{{ {0} }}}}").format(u("|").join(i))

delimited_line(delim) = delim l:line(delim)? delim -> l or ""

string = delimited_line("\"") | delimited_line("'")

tag = "@" !"/" i:ident -> NodeTag(i)

id = '#' i:[variable | ident] -> NodeId(i)
    # <div id="zoum">

cls = "." i:[variable | ident] -> NodeClass(i)

attrib = key:ident "=" value:[ string | line(/\s/) ] -> NodeNamed(key, value)

attribute = _space? a:[id | cls | attrib] -> a

lineelt(terminator) =
       "@/" i:ident a:attribute* -> NodeTag(i).set_selfclosing().set_attributes(a)

    |  t:tag _space? a:attribute* _space? "[" i:line("]")? "]" ->
        t.set_attributes(a).set_line(i or "")

    | t:tag _space? a:attribute* _space? i:line(terminator)? ->
        t.set_attributes(a).set_line(i)

    | variable

    | \\ t:/./ -> t
        # Backslashed terminator.
    | !terminator c:/./ -> c

line(terminator=EOL) = e:lineelt(terminator)+ -> NodeLine(e)

blockstart(ls) =
      t:tag _space? a:attribute* _space? i:line? EOL b:block(indent(ls)) ->
        return t.set_attributes(a).set_block(b).set_line(i)

    | a:attribute+ i:line? EOL b:block(indent(ls))? ->
        NodeTag("div").set_attributes(a).set_block(b).set_line(i)

    | "%" _space? j:ident c:/[^\n]*/ EOL b:block(indent(ls))? -> NodeJinja(j, c, b)

    | c:line _space? EOL? ->
        return c

block(ls) =
      i:IndentedBlock(blockstart(ls), ls) -> NodeBlock(i)

