%%

import re

from nodes import *

try:
    u = unicode
except Exception as e:
    u = str

def getindent(start):
    return len(start) - start.rfind('\n') - 1

_is = [] # _is is short for "Indent Stack"
def checkindent(indent, start):
    sindent = getindent(start)
    ci = len(_is) # Current indent index

    if indent == ci:
        # We're looking at a new indentation, to potentially push it
        # on the stack if we can.

        if ci == 0 or sindent > _is[-1]:
            _is.append(sindent)
            return True

        # It is not higher, so we just tell the parser that we
        # can't continue on that indentation level.
        return False

    if indent == ci - 1:
        # We're in the current block and want to check if this
        # line is correctly indented.

        # We're at the correct level, so we just return True
        if sindent >= _is[-1]: return True

        # We're looking at a deindent, so we pop the current indent
        # level from the stack.
        _is.pop()
        return False

def higherindent(start):
    sindent = len(start) - start.rfind('\n') - 1
    return sindent > _is[-1]


def lastindent():
    return _is[-1]

allbut_jinja_print = allbut_regexp("}}", '"}}"')

%%

comment = /\s*#\s[^\n]*/ -> ""
_space = c:/[ \t]*(#\s+.*$)?/ ->
    return re.sub("#\s[^\n]*", "", c)

fullspace = c:/([ \t]*(#\s+.*)?(\n|$))*[ \t]*/ ->
    return re.sub("#\s[^\n]*", "", c)

EOL = "\n"

ident = /[-$\w:]+/u
vident = /[a-zA-Z_][a-zA-Z0-9_]*/

access_or_funcall = b:[ Balanced("[", "]", "\\") | Balanced("(", ")", "\\") ] -> "".join(b)
variable_component = i:vident a:access_or_funcall* -> i + "".join(a)
variable_dotted = i:OneOrMoreSeparated(variable_component, ".") -> u(".").join(i)
variable = "$" i:OneOrMoreSeparated(variable_dotted, "|") -> u("{{{{ {0} }}}}").format(u("|").join(i))
    | b:"{{" c:allbut_jinja_print e:"}}" -> b + c + e

delimited_line(delim) = delim l:line(delim)? delim -> l or ""

string = delimited_line("\"") | delimited_line("'")

tag = "@" !"/" i:ident -> NodeTag(i)
extern_tag = ":" i:["plain" | "javascript" | "css" | "coco" | "coffeescript" | "coffee" | "sass" | "scss"] -> NodeExtern(i)

single_identifier = i:["\\$" | variable | /[^\s#\.]/ ]+ -> "".join(i)

id = '#' i:single_identifier -> NodeId(i)
    # <div id="zoum">

cls = "." i:single_identifier -> NodeClass(i)

single_prop = \\ i:single_identifier -> NodeSingle(i)

attrib = key:ident "=" value:[ string | line(/\s/) ] -> NodeNamed(key, value)

attribute = _space? a:[id | cls | single_prop | attrib] -> a

lineelt(terminator) =
       "@/" i:ident a:attribute* -> NodeTag(i).set_selfclosing().set_attributes(a)

    |  t:tag _space? a:attribute* _space? "[" i:line("]")? "]" ->
        t.set_attributes(a).set_line(i or "")

    | t:tag _space? a:attribute* _space? i:line(terminator)? ->
        t.set_attributes(a).set_line(i)

    | comment

    | variable

    | \\ t:/./ -> t
        # Backslashed terminator.
    | !terminator c:/./ -> c

line(terminator=EOL) = _space? e:lineelt(terminator)+ -> NodeLine(e)

blockraw =
    lines:[
        start:fullspace { higherindent(start) } contents:/[^\n]*/ ->
            # We just nuke the indentation from the raw text.
            return [start, contents]
    ]+ ->
        return [lastindent(), lines]


blockstart(indent) =
      t:tag _space? a:attribute* _space? i:line? EOL b:block(indent + 1) ->
        return t.set_attributes(a).set_block(b).set_line(i)

    | a:attribute+ i:line? EOL b:block(indent + 1)? ->
        NodeTag("div").set_attributes(a).set_block(b).set_line(i)

    | "%" _space? j:ident c:/[^\n]*/ EOL b:block(indent + 1)? -> NodeJinja(j, c, b)

    | t:extern_tag a:attribute* _space? EOL b:blockraw? EOL? -> t.set_attributes(a).set_block(b)

    | c:line _space? EOL? ->
        return c

    | s:_space? e:EOL? -> (s or "")

block(indent) =
    lines:[
        start:fullspace { checkindent(indent, start) } block:blockstart(indent) -> [start, block]
    ]+ {
        if indent == 0:
            global _is
            _is = []
        } ->
        return NodeBlock(lines)
